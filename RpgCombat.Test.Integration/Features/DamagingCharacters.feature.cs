// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RpgCombat.Test.Integration.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Damaging characters")]
    public partial class DamagingCharactersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "DamagingCharacters.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Damaging characters", @"Characters can Damage other non-allied characters if they are in range.
The maximum range depends on the character class.
Damage taken by a character is subtracted from the character's Health.
If the Health drops to or below zero, that character dies.

The Damage dealt between characters depends on both the attacker's and target's Level.
If the target is 5 or more Levels above the attacker, Damage is reduced by 50%.
If the target is 5 or more Levels below the attacker, Damage is increased by 50%.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Character deals less damage than the other character\'s health")]
        public virtual void CharacterDealsLessDamageThanTheOtherCharactersHealth()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Character deals less damage than the other character\'s health", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Health"});
                table2.AddRow(new string[] {
                            "Hector The Well-Endowed",
                            ""});
                table2.AddRow(new string[] {
                            "Lavernica",
                            "1000"});
#line 12
        testRunner.Given("the following characters:", ((string)(null)), table2, "Given ");
#line hidden
#line 16
        testRunner.When("\"Hector The Well-Endowed\" attempts to deal 100 damage to \"Lavernica\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
        testRunner.Then("the health of \"Lavernica\" should be 900", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
        testRunner.And("\"Lavernica\" should be Alive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Character deals more damage than the other character\'s health")]
        public virtual void CharacterDealsMoreDamageThanTheOtherCharactersHealth()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Character deals more damage than the other character\'s health", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Health"});
                table3.AddRow(new string[] {
                            "Hector The Well-Endowed",
                            ""});
                table3.AddRow(new string[] {
                            "Lavernica",
                            "100"});
#line 21
        testRunner.Given("the following characters:", ((string)(null)), table3, "Given ");
#line hidden
#line 25
        testRunner.When("\"Hector The Well-Endowed\" attempts to deal 200 damage to \"Lavernica\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
        testRunner.Then("\"Lavernica\" should be Dead", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
        testRunner.And("the health of \"Lavernica\" should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Characters cannot deal negative damage")]
        public virtual void CharactersCannotDealNegativeDamage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Characters cannot deal negative damage", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Health"});
                table4.AddRow(new string[] {
                            "Hector The Well-Endowed",
                            ""});
                table4.AddRow(new string[] {
                            "Lavernica",
                            "800"});
#line 30
        testRunner.Given("the following characters:", ((string)(null)), table4, "Given ");
#line hidden
#line 34
        testRunner.When("\"Hector The Well-Endowed\" attempts to deal -200 damage to \"Lavernica\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
        testRunner.Then("the health of \"Lavernica\" should be 800", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dead characters cannot be damaged")]
        public virtual void DeadCharactersCannotBeDamaged()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dead characters cannot be damaged", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Health"});
                table5.AddRow(new string[] {
                            "Hector The Well-Endowed",
                            ""});
                table5.AddRow(new string[] {
                            "Lavernica",
                            "0"});
#line 38
        testRunner.Given("the following characters:", ((string)(null)), table5, "Given ");
#line hidden
#line 42
        testRunner.Then("\"Hector The Well-Endowed\" should not be able to damage \"Lavernica\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Characters cannot damage themselves")]
        public virtual void CharactersCannotDamageThemselves()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Characters cannot damage themselves", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Health"});
                table6.AddRow(new string[] {
                            "Hector The Well-Endowed",
                            "1000"});
#line 45
        testRunner.Given("the following characters:", ((string)(null)), table6, "Given ");
#line hidden
#line 48
        testRunner.Then("\"Hector The Well-Endowed\" should not be able to damage \"Hector The Well-Endowed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dead characters cannot damage other characters")]
        public virtual void DeadCharactersCannotDamageOtherCharacters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dead characters cannot damage other characters", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Health"});
                table7.AddRow(new string[] {
                            "Hector The Well-Endowed",
                            "0"});
                table7.AddRow(new string[] {
                            "Lavernica",
                            "1000"});
#line 51
        testRunner.Given("the following characters:", ((string)(null)), table7, "Given ");
#line hidden
#line 55
        testRunner.Then("\"Hector The Well-Endowed\" should not be able to damage \"Lavernica\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Melee characters have a maximum range of 2")]
        public virtual void MeleeCharactersHaveAMaximumRangeOf2()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Melee characters have a maximum range of 2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 57
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Class",
                            "X",
                            "Y"});
                table8.AddRow(new string[] {
                            "Hector The Well-Endowed",
                            "Melee",
                            "0",
                            "0"});
                table8.AddRow(new string[] {
                            "Brutalitops",
                            "",
                            "1",
                            "0"});
                table8.AddRow(new string[] {
                            "Duquesne",
                            "",
                            "1",
                            "1"});
                table8.AddRow(new string[] {
                            "Zippadeedoo",
                            "",
                            "2",
                            "1"});
                table8.AddRow(new string[] {
                            "Bing Bong The Archer",
                            "",
                            "-2",
                            "2"});
#line 58
        testRunner.Given("the following characters:", ((string)(null)), table8, "Given ");
#line hidden
#line 65
        testRunner.Then("\"Hector The Well-Endowed\" should be able to damage \"Brutalitops\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
        testRunner.And("\"Hector The Well-Endowed\" should be able to damage \"Duquesne\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
        testRunner.But("\"Hector The Well-Endowed\" should not be able to damage \"Zippadeedoo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
#line 68
        testRunner.And("\"Hector The Well-Endowed\" should not be able to damage \"Bing Bong The Archer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ranged characters have a maximum range of 20")]
        public virtual void RangedCharactersHaveAMaximumRangeOf20()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ranged characters have a maximum range of 20", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 70
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Class",
                            "X",
                            "Y"});
                table9.AddRow(new string[] {
                            "Bing Bong The Archer",
                            "Ranged",
                            "0",
                            "0"});
                table9.AddRow(new string[] {
                            "Duquesne",
                            "",
                            "-3",
                            "2"});
                table9.AddRow(new string[] {
                            "Brutalitops",
                            "",
                            "5",
                            "-8"});
                table9.AddRow(new string[] {
                            "Lavernica",
                            "",
                            "15",
                            "-15"});
                table9.AddRow(new string[] {
                            "Hector The Well-Endowed",
                            "",
                            "21",
                            "0"});
#line 71
        testRunner.Given("the following characters:", ((string)(null)), table9, "Given ");
#line hidden
#line 78
        testRunner.Then("\"Bing Bong The Archer\" should be able to damage \"Duquesne\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
        testRunner.And("\"Bing Bong The Archer\" should be able to damage \"Brutalitops\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
        testRunner.But("\"Bing Bong The Archer\" should not be able to damage \"Lavernica\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
#line 81
        testRunner.And("\"Bing Bong The Archer\" should not be able to damage \"Hector The Well-Endowed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Characters with a level difference of less than 5 have no damage multiplier")]
        [NUnit.Framework.TestCaseAttribute("1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("2", "4", null)]
        [NUnit.Framework.TestCaseAttribute("5", "2", null)]
        [NUnit.Framework.TestCaseAttribute("6", "6", null)]
        public virtual void CharactersWithALevelDifferenceOfLessThan5HaveNoDamageMultiplier(string attackerLevel, string defenderLevel, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AttackerLevel", attackerLevel);
            argumentsOfScenario.Add("DefenderLevel", defenderLevel);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Characters with a level difference of less than 5 have no damage multiplier", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Health",
                            "Level"});
                table10.AddRow(new string[] {
                            "Marrrrrr",
                            "1000",
                            string.Format("{0}", attackerLevel)});
                table10.AddRow(new string[] {
                            "Zippadeedoo",
                            "1000",
                            string.Format("{0}", defenderLevel)});
#line 84
        testRunner.Given("the following characters:", ((string)(null)), table10, "Given ");
#line hidden
#line 88
        testRunner.When("\"Marrrrrr\" attempts to deal 100 damage to \"Zippadeedoo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
        testRunner.Then("the health of \"Zippadeedoo\" should be 900", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When dealing damage to a character that is 5 or more levels lower, the damage is " +
            "increased by 50%")]
        [NUnit.Framework.TestCaseAttribute("20", "1", null)]
        [NUnit.Framework.TestCaseAttribute("10", "3", null)]
        [NUnit.Framework.TestCaseAttribute("8", "3", null)]
        public virtual void WhenDealingDamageToACharacterThatIs5OrMoreLevelsLowerTheDamageIsIncreasedBy50(string attackerLevel, string defenderLevel, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AttackerLevel", attackerLevel);
            argumentsOfScenario.Add("DefenderLevel", defenderLevel);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When dealing damage to a character that is 5 or more levels lower, the damage is " +
                    "increased by 50%", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 98
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Health",
                            "Level"});
                table11.AddRow(new string[] {
                            "Brutalitops",
                            "1000",
                            string.Format("{0}", attackerLevel)});
                table11.AddRow(new string[] {
                            "Lavernica",
                            "1000",
                            string.Format("{0}", defenderLevel)});
#line 99
        testRunner.Given("the following characters:", ((string)(null)), table11, "Given ");
#line hidden
#line 103
        testRunner.When("\"Brutalitops\" attempts to deal 100 damage to \"Lavernica\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
        testRunner.Then("the health of \"Lavernica\" should be 850", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When dealing damage to a character that is 5 or more levels higher, the damage is" +
            " decreased by 50%")]
        [NUnit.Framework.TestCaseAttribute("5", "10", null)]
        [NUnit.Framework.TestCaseAttribute("1", "100", null)]
        [NUnit.Framework.TestCaseAttribute("25", "42", null)]
        public virtual void WhenDealingDamageToACharacterThatIs5OrMoreLevelsHigherTheDamageIsDecreasedBy50(string attackerLevel, string defenderLevel, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AttackerLevel", attackerLevel);
            argumentsOfScenario.Add("DefenderLevel", defenderLevel);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When dealing damage to a character that is 5 or more levels higher, the damage is" +
                    " decreased by 50%", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Health",
                            "Level"});
                table12.AddRow(new string[] {
                            "Naked Pierce Hawthorne",
                            "1000",
                            string.Format("{0}", attackerLevel)});
                table12.AddRow(new string[] {
                            "Duquesne",
                            "1000",
                            string.Format("{0}", defenderLevel)});
#line 113
        testRunner.Given("the following characters:", ((string)(null)), table12, "Given ");
#line hidden
#line 117
        testRunner.When("\"Naked Pierce Hawthorne\" attempts to deal 100 damage to \"Duquesne\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
        testRunner.Then("the health of \"Duquesne\" should be 950", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
